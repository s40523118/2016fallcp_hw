<?xml version="1.0" encoding="utf-8"?>
<!-- Created by Leo: http://leoeditor.com/leo_toc.html -->
<leo_file xmlns:leo="http://leoeditor.com/namespaces/leo-python-editor/1.1" >
<leo_header file_format="2" tnodes="0" max_tnode_index="0" clone_windows="0"/>
<globals body_outline_ratio="0.5" body_secondary_ratio="0.5">
	<global_window_position top="50" left="50" height="500" width="700"/>
	<global_log_window_position top="0" left="0" height="0" width="0"/>
</globals>
<preferences/>
<find_panel_settings/>
<vnodes>
<v t="leo.20151212173315.1"><vh>@settings</vh>
<v t="leo.20151212173315.2"><vh>@data qt-gui-plugin-style-sheet</vh></v>
<v t="leo.20151212173315.3"><vh>@string initial_split_orientation = horizontal</vh></v>
</v>
<v t="amd.20160921213353.1"><vh>2016fall 簡報與網誌樣板系統</vh></v>
<v t="amd.20160106095324.1" a="E"><vh>@path ./../</vh>
<v t="leo.20151213173830.1" a="E"><vh>假如要在近端檢視, 使用下列按鈕</vh>
<v t="leo.20151213085727.1"><vh>@button pelican-blog</vh></v>
</v>
<v t="amd.20151215180106.1"><vh>設定與開發</vh>
<v t="amd.20151216151325.1" a="E"><vh>@clean index.html</vh>
<v t="amd.20161004083800.1" a="E"><vh>html</vh>
<v t="amd.20161004083800.2" a="E"><vh>head</vh>
<v t="amd.20161004083800.3"><vh>&lt;&lt; 投影片標題 &gt;&gt;</vh></v>
</v>
<v t="amd.20161004083800.5" a="E"><vh>body</vh>
<v t="amd.20161004083800.6" a="E"><vh>reveal div</vh>
<v t="amd.20161004083800.7" a="E"><vh>slides div</vh>
<v t="amd.20161004095719.1" a="E"><vh>封面投影片</vh>
<v t="amd.20161004095719.2"><vh>封面投影片內容</vh></v>
</v>
<v t="amd.20161004083800.8"><vh>HTML 投影片 (標題)</vh></v>
<v t="amd.20161004104820.1" a="E"><vh>三大主題教學</vh>
<v t="amd.20161004104641.1" a="E"><vh>主題教學</vh>
<v t="amd.20161004104641.2"><vh>機械設計主題教學</vh></v>
</v>
<v t="amd.20161004104904.1" a="E"><vh>創造力元素</vh>
<v t="amd.20161004104904.2"><vh>創造能力三元素</vh></v>
</v>
<v t="amd.20161004105131.1" a="E"><vh>六種表達</vh>
<v t="amd.20161004105131.2"><vh>創造能力三元素</vh></v>
</v>
<v t="amd.20161004105716.1" a="E"><vh>協同設計</vh>
<v t="amd.20161004105716.2"><vh>融入協同設計</vh></v>
</v>
</v>
<v t="amd.20161004101327.1" a="E"><vh>MD 投影片 (標題)</vh>
<v t="amd.20161004101327.2"><vh>利用 MD 寫內容</vh></v>
</v>
<v t="amd.20161004112026.1" a="E"><vh>計算機程式課程內涵</vh>
<v t="amd.20161004112026.2"><vh>利用 MD 寫內容</vh></v>
</v>
<v t="amd.20161004083800.15"><vh>github intro</vh></v>
<v t="amd.20161004083800.21"><vh>fork 與 pull requests</vh></v>
<v t="amd.20161004083800.27" a="E"><vh>投影片</vh>
<v t="amd.20161004101902.1" a="E"><vh>使用 iframe 嵌入影片連節</vh>
<v t="amd.20161004101902.2"><vh>iframe 導入影片</vh></v>
</v>
<v t="amd.20161004085439.1"><vh>向下投影片</vh></v>
</v>
<v t="amd.20161004083800.47" a="E"><vh>Markdown 投影片</vh>
<v t="amd.20161004092208.1"><vh>利用 MD 寫內容</vh></v>
</v>
<v t="amd.20161004094125.1" a="E"><vh>Markdown 投影片</vh>
<v t="amd.20161004094125.2"><vh>MD 投影片內容</vh></v>
</v>
<v t="amd.20161004094800.1" a="E"><vh>Markdown 投影片</vh>
<v t="amd.20161004094800.2"><vh>MD 投影片內容</vh></v>
</v>
<v t="amd.20161004100003.1" a="E"><vh>Markdown 投影片</vh>
<v t="amd.20161004100003.2"><vh>MD 投影片內容</vh></v>
</v>
<v t="amd.20161004171423.1" a="E"><vh>Markdown 投影片</vh>
<v t="amd.20161004171423.2"><vh>MD 投影片內容</vh></v>
</v>
<v t="amd.20161004083800.110"><vh>引用程式碼</vh></v>
<v t="amd.20161004083800.115"><vh>無序表列</vh></v>
<v t="amd.20161004083800.121"><vh>有序表列</vh></v>
<v t="amd.20161004083800.158"><vh>轉為 PDF 檔案</vh></v>
<v t="amd.20161004083800.162"><vh>全域狀態應用</vh></v>
<v t="amd.20161004083800.166"><vh>狀態事件應用</vh></v>
</v>
</v>
</v>
</v>
</v>
<v t="leo.20151213230723.1"><vh>Pelican 設定</vh>
<v t="leo.20151213230957.1"><vh>文章 Date 設定</vh></v>
<v t="leo.20151213230729.1"><vh>使用 summary plugin</vh></v>
</v>
<v t="amd.20151215170117.1"><vh>以下 pelicanconf.py 為近端與遠端的共同設定</vh></v>
<v t="leo.20151212173725.1"><vh>@edit pelicanconf.py</vh></v>
<v t="amd.20151215170221.1"><vh>以下 local_publishconf.py 為近端所使用的設定</vh></v>
<v t="leo.20151213085752.1"><vh>@edit local_publishconf.py</vh></v>
</v>
</v>
<v t="amd.20151215170350.1"><vh>以下為 content 目錄中的 md 檔案</vh></v>
<v t="amd.20151216001126.1"><vh>md 檔案範例</vh></v>
<v t="amd.20151215170031.1" a="E"><vh>@path ./../content</vh>
<v t="amd.20160106093454.1" a="E"><vh>yen 所寫的網誌文章</vh>
<v t="amd.20160727114506.1" a="E"><vh>201609</vh>
<v t="leo.20170106140156.1"><vh>@edit 20161230.md</vh></v>
<v t="leo.20170106140152.1"><vh>@clean 20161217.md</vh>
<v t="leo.20170106140152.2"><vh>ch01 print() 與 input()</vh></v>
<v t="leo.20170106140152.3"><vh>cp a w13</vh></v>
<v t="leo.20170106140152.4"><vh>Brython editor</vh></v>
<v t="leo.20170106140152.5"><vh>ex1 - for 迴圈</vh></v>
<v t="leo.20170106140152.6"><vh>ex2 - input 與單位換算</vh></v>
<v t="leo.20170106140152.7"><vh>ex3 - 基本的物件導向</vh></v>
<v t="leo.20170106140152.8"><vh>ex4 - local_storage</vh></v>
<v t="leo.20170106140152.9"><vh>ch02 str() 與 int() 與 float()</vh></v>
</v>
<v t="leo.20170106140141.1"><vh>@edit 20161209b.md</vh></v>
<v t="leo.20170106140136.1"><vh>@edit 20161209a.md</vh></v>
<v t="leo.20170106140123.1"><vh>@edit 20161114..md</vh></v>
<v t="leo.20170106140128.1"><vh>@edit 20161202.md</vh></v>
<v t="leo.20170106140116.1"><vh>@edit 20161014.md</vh></v>
<v t="amd.20160727120222.1"><vh>@edit 20160921.md</vh></v>
</v>
</v>
</v>
<v t="amd.20160106094754.1"><vh>@path ./../content/pages</vh>
<v t="amd.20160106094829.1" a="E"><vh>yen 所寫的 pages 文章</vh>
<v t="amd.20160106094844.1"><vh>@edit pages_1.md</vh></v>
</v>
</v>
<v t="leo.20170106140530.1"><vh>@edit ../README.md</vh></v>
<v t="leo.20170106140243.1"><vh>@button https server</vh></v>
<v t="leo.20170106140251.1"><vh>產生 .key 與 .crt</vh></v>
<v t="leo.20170106140237.1"><vh>@button ipv6 https server</vh></v>
<v t="leo.20170106140054.2"><vh>Recovered Nodes</vh>
<v t="leo.20170106140054.3"><vh>Recovered node "head" from @clean index.html</vh>
<v t="leo.20170106140054.4"><vh>old:head</vh></v>
<v t="leo.20170106140054.5"><vh>new:head</vh></v>
</v>
<v t="leo.20170106140054.6"><vh>Recovered node "&lt;&lt; 投影片標題 &gt;&gt;" from @clean index.html</vh>
<v t="leo.20170106140054.7"><vh>old:&lt;&lt; 投影片標題 &gt;&gt;</vh></v>
<v t="leo.20170106140054.8"><vh>new:&lt;&lt; 投影片標題 &gt;&gt;</vh></v>
</v>
</v>
</vnodes>
<tnodes>
<t tx="amd.20151215170031.1"></t>
<t tx="amd.20151215170117.1"></t>
<t tx="amd.20151215170221.1"></t>
<t tx="amd.20151215170350.1"></t>
<t tx="amd.20151215180106.1"></t>
<t tx="amd.20151216001126.1">@language md
Title: 文章標題 (請注意各文章的標題不可相同, 比較保險的作法是冠上四個學號尾碼)
Date: 2016-09-2 12:00
Category: 類別
Tags: 標籤
Author: yen

這裡放入文章摘要

&lt;!-- PELICAN_END_SUMMARY --&gt;

這裡為文章主要內容

程式碼

&lt;pre class="brush: python;"&gt;
print("hello")
&lt;/pre&gt;</t>
<t tx="amd.20151216151325.1">@language xml
@tabwidth -4
@others

</t>
<t tx="amd.20160106093454.1"></t>
<t tx="amd.20160106094754.1"></t>
<t tx="amd.20160106094829.1"></t>
<t tx="amd.20160106095324.1"></t>
<t tx="amd.20160727114506.1"></t>
<t tx="amd.20160921213353.1"></t>
<t tx="amd.20161004083800.1">&lt;!doctype html&gt;
&lt;html lang="en"&gt;
@others
&lt;/html&gt;
</t>
<t tx="amd.20161004083800.110">&lt;section&gt;
    &lt;h2&gt;Pretty Code&lt;/h2&gt;
    &lt;pre&gt;
        &lt;code class="hljs" data-trim contenteditable&gt;
        function linkify( selector ) {
          if( supports3DTransforms ) {
        
            var nodes = document.querySelectorAll( selector );
        
            for( var i = 0, len = nodes.length; i &amp;lt; len; i++ ) {
              var node = nodes[i];
        
              if( !node.className ) {
                node.className += ' roll';
              }
            }
          }
        }
        &lt;/code&gt;
    &lt;/pre&gt;
    &lt;p&gt;
    Code syntax highlighting courtesy of &lt;a href="http://softwaremaniacs.org/soft/highlight/en/description/"&gt;highlight.js&lt;/a&gt;.
    &lt;/p&gt;
&lt;/section&gt;
			
</t>
<t tx="amd.20161004083800.115">&lt;section&gt;	
    &lt;h2&gt;Marvelous List&lt;/h2&gt;
    &lt;ul&gt;
    &lt;li&gt;No order here&lt;/li&gt;
    &lt;li&gt;Or here&lt;/li&gt;
    &lt;li&gt;Or here&lt;/li&gt;
    &lt;li&gt;Or here&lt;/li&gt;
    &lt;/ul&gt;
&lt;/section&gt;

					
</t>
<t tx="amd.20161004083800.121">&lt;section&gt;
    &lt;h2&gt;Fantastic Ordered List&lt;/h2&gt;
    &lt;ol&gt;
    &lt;li&gt;One is smaller than...&lt;/li&gt;
    &lt;li&gt;Two is smaller than...&lt;/li&gt;
    &lt;li&gt;Three!&lt;/li&gt;
    &lt;/ol&gt;
&lt;/section&gt;


					
</t>
<t tx="amd.20161004083800.15">&lt;section&gt;
    &lt;h2&gt;github_intro&lt;/h2&gt;
    &lt;iframe src="https://player.vimeo.com/video/183950627" width="640" height="492" frameborder="0" webkitallowfullscreen mozallowfullscreen allowfullscreen&gt;&lt;/iframe&gt;
    &lt;p&gt;
    &lt;a href="https://vimeo.com/183950627"&gt;2016-09-23_cpb_github_intro&lt;/a&gt; from 
    &lt;a href="https://vimeo.com/user24079973"&gt;虎尾科大機械設計工程&lt;/a&gt; on 
    &lt;a href="https://vimeo.com"&gt;Vimeo&lt;/a&gt;.
    &lt;/p&gt;
&lt;/section&gt;
</t>
<t tx="amd.20161004083800.158">&lt;section&gt;
    &lt;h2&gt;Export to PDF&lt;/h2&gt;
    &lt;p&gt;
    Presentations can be &lt;a href="https://github.com/hakimel/reveal.js#pdf-export"&gt;exported to PDF&lt;/a&gt;, here's an example:
    &lt;/p&gt;	
    &lt;iframe data-src="https://www.slideshare.net/slideshow/embed_code/42840540" width="445" height="355" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" style="border:3px solid #666; margin-bottom:5px; max-width: 100%;" allowfullscreen&gt; &lt;/iframe&gt;
&lt;/section&gt;				
</t>
<t tx="amd.20161004083800.162">&lt;section&gt;
&lt;h2&gt;Global State&lt;/h2&gt;
&lt;p&gt;
Set &lt;code&gt;data-state="something"&lt;/code&gt; on a slide and 
&lt;code&gt;"something"&lt;/code&gt;
will be added as a class to the document element when the slide is open. This lets you
apply broader style changes, like switching the page background.
&lt;/p&gt;
&lt;/section&gt;

		
</t>
<t tx="amd.20161004083800.166">&lt;section data-state="customevent"&gt;	
    &lt;h2&gt;State Events&lt;/h2&gt;
    &lt;p&gt;
    Additionally custom events can be triggered on a per slide basis by binding to the &lt;code&gt;data-state&lt;/code&gt; name.
    &lt;/p&gt;
    &lt;pre&gt;
        &lt;code class="javascript" data-trim contenteditable style="font-size: 18px;"&gt;
        Reveal.addEventListener( 'customevent', function() {
            console.log( '"customevent" has fired' );
        } );
        &lt;/code&gt;
    &lt;/pre&gt;
&lt;/section&gt;					
</t>
<t tx="amd.20161004083800.2">&lt;head&gt;
    &lt;meta charset="utf-8"&gt;
    &lt;title&gt;    2016 Fall 計算機程式課程
    &lt;&lt; 投影片標題 &gt;&gt;
&lt;/title&gt;
    &lt;meta name="description" content="A framework for easily creating beautiful presentations using HTML"&gt;
    &lt;meta name="author" content="Hakim El Hattab"&gt;
    
    &lt;meta name="apple-mobile-web-app-capable" content="yes"&gt;
    &lt;meta name="apple-mobile-web-app-status-bar-style" content="black-translucent"&gt;
    
    &lt;meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no"&gt;
    
    &lt;link rel="stylesheet" href="https://cad-lab.github.io/cadlab_data/reveal/css/reveal.css"&gt;
    &lt;link rel="stylesheet" href="https://cad-lab.github.io/cadlab_data/reveal/css/theme/black.css" id="theme"&gt;
    
    &lt;!-- Theme used for syntax highlighting of code --&gt;
    &lt;link rel="stylesheet" href="https://cad-lab.github.io/cadlab_data/reveal/lib/css/zenburn.css"&gt;

    &lt;!-- Printing and PDF exports --&gt;
    &lt;script&gt;
        var link = document.createElement( 'link' );
        link.rel = 'stylesheet';
        link.type = 'text/css';
        link.href = window.location.search.match( /print-pdf/gi ) ? 'https://cad-lab.github.io/cadlab_data/reveal/css/print/pdf.css' : 'https://cad-lab.github.io/cadlab_data/reveal/css/print/paper.css';
        document.getElementsByTagName( 'head' )[0].appendChild( link );
    &lt;/script&gt;

    &lt;!--[if lt IE 9]&gt;
    &lt;script src="https://cad-lab.github.io/cadlab_data/reveal/lib/js/html5shiv.js"&gt;&lt;/script&gt;
    &lt;![endif]--&gt;
&lt;/head&gt;

</t>
<t tx="amd.20161004083800.21">&lt;section&gt;
    &lt;h2&gt;fork_pull_requests&lt;/h2&gt;
    &lt;iframe src="https://player.vimeo.com/video/183954581" width="640" height="492" frameborder="0" webkitallowfullscreen mozallowfullscreen allowfullscreen&gt;&lt;/iframe&gt;
    &lt;p&gt;
    &lt;a href="https://vimeo.com/183954581"&gt;2016-09-23_fork_pull_requests&lt;/a&gt; from 
    &lt;a href="https://vimeo.com/user24079973"&gt;虎尾科大機械設計工程&lt;/a&gt; on 
    &lt;a href="https://vimeo.com"&gt;Vimeo&lt;/a&gt;.
    &lt;/p&gt;
&lt;/section&gt;
</t>
<t tx="amd.20161004083800.27">&lt;!-- Example of nested vertical slides --&gt;
&lt;section&gt;
@others
&lt;/section&gt;
</t>
<t tx="amd.20161004083800.3"></t>
<t tx="amd.20161004083800.47">&lt;section data-markdown&gt;
    &lt;script type="text/template"&gt;
@others
    &lt;/script&gt;
&lt;/section&gt;


						
</t>
<t tx="amd.20161004083800.5">&lt;body&gt;
@others
&lt;script src="https://cad-lab.github.io/cadlab_data/reveal/lib/js/head.min.js"&gt;&lt;/script&gt;
&lt;script src="https://cad-lab.github.io/cadlab_data/reveal/js/reveal.js"&gt;&lt;/script&gt;
&lt;script&gt;
        // More info https://github.com/hakimel/reveal.js#configuration
        Reveal.initialize({
            controls: true,
            progress: true,
            history: true,
            center: true,

            transition: 'slide', // none/fade/slide/convex/concave/zoom

            // More info https://github.com/hakimel/reveal.js#dependencies
            dependencies: [
                { src: 'https://cad-lab.github.io/cadlab_data/reveal/lib/js/classList.js', condition: function() { return !document.body.classList; } },
                { src: 'https://cad-lab.github.io/cadlab_data/reveal/plugin/markdown/marked.js', condition: function() { return !!document.querySelector( '[data-markdown]' ); } },
                { src: 'https://cad-lab.github.io/cadlab_data/reveal/plugin/markdown/markdown.js', condition: function() { return !!document.querySelector( '[data-markdown]' ); } },
                { src: 'https://cad-lab.github.io/cadlab_data/reveal/plugin/highlight/highlight.js', async: true, callback: function() { hljs.initHighlightingOnLoad(); } },
                { src: 'https://cad-lab.github.io/cadlab_data/reveal/plugin/zoom-js/zoom.js', async: true },
                { src: 'https://cad-lab.github.io/cadlab_data/reveal/plugin/notes/notes.js', async: true },
                { src: 'https://cad-lab.github.io/cadlab_data/reveal/plugin/math/math.js', async: true }
            ]
        });
&lt;/script&gt;
&lt;/body&gt;
</t>
<t tx="amd.20161004083800.6">&lt;div class="reveal"&gt;
@others
&lt;/div&gt;

</t>
<t tx="amd.20161004083800.7">&lt;!-- Any section element inside of this container is displayed as a slide --&gt;
&lt;div class="slides"&gt;
@others
&lt;/div&gt;

</t>
<t tx="amd.20161004083800.8">&lt;section&gt;
    &lt;h1&gt;2016Fall CPA 計算機程式課程&lt;/h1&gt;
    &lt;h3&gt;The HTML Presentation Framework&lt;/h3&gt;
    &lt;p&gt;
    &lt;small&gt;
    Created by &lt;a href="http://hakim.se"&gt;Hakim El Hattab&lt;/a&gt; / 
    &lt;a href="http://twitter.com/hakimel"&gt;@hakimel&lt;/a&gt;
    &lt;/small&gt;
    &lt;/p&gt;
    
    &lt;a href="blog/index.html"&gt;blog&lt;/a&gt;
&lt;/section&gt;
</t>
<t tx="amd.20161004085439.1">&lt;section&gt;
    &lt;h2&gt;Vertical Slides&lt;/h2&gt;
    &lt;p&gt;Slides can be nested inside of each other.&lt;/p&gt;
    &lt;p&gt;
    Use the &lt;em&gt;Space&lt;/em&gt; key to navigate through all slides.
    &lt;/p&gt;
    &lt;br&gt;
    &lt;a href="#" class="navigate-down"&gt;
        &lt;img width="178" height="238" data-src="https://s3.amazonaws.com/hakim-static/reveal-js/arrow.png" alt="Down arrow"&gt;
    &lt;/a&gt;
&lt;/section&gt;
</t>
<t tx="amd.20161004092208.1">## Markdown support

Write content using inline or external Markdown.
Instructions and more info available in the [readme](https://github.com/hakimel/reveal.js#markdown).

```
&lt;section data-markdown&gt;
  ## Markdown support

  Write content using inline or external Markdown.
  Instructions and more info available in the [readme](https://github.com/hakimel/reveal.js#markdown).
&lt;/section&gt;
```
</t>
<t tx="amd.20161004094125.1">&lt;section data-markdown&gt;
    &lt;script type="text/template"&gt;
&lt;!-- 請注意, @others 不可以內縮 --&gt;
@others
    &lt;/script&gt;
&lt;/section&gt;



						
</t>
<t tx="amd.20161004094125.2">## 利用 Markdown 寫投影片
以下利用 Markdown 格式展示 Python 程式碼:
```
@language python
# use threading and subprocess to threading the make process
import os
import subprocess
import threading

def domake():
    
    path = "../exposed/api/exposed"
    ubuntu = "../Ubuntu"
    
    # create obj path
    
    if not os.path.exists(path+"/../obj"):
        os.makedirs(path+"/../obj")
    
    subprocess.call(["make", "clean"], cwd=path)
    subprocess.call("make", cwd=path)
    subprocess.call(["cp", "{libslvs.so, _slvs.so, slvs.py}", ubuntu], cwd=path)
    subprocess.call(["python3", "circle_ex.py"], cwd=path+"/"+ubuntu)
    
make = threading.Thread(target=domake)
make.start()
```
</t>
<t tx="amd.20161004094800.1">&lt;section data-markdown&gt;
    &lt;script type="text/template"&gt;
&lt;!-- 請注意, @others 不可以內縮 --&gt;
@others
    &lt;/script&gt;
&lt;/section&gt;



						
</t>
<t tx="amd.20161004094800.2"># h1 標題

段落用空白行隔開

第2段. *斜體*, **粗體**, 條列:

  * 第1項
  * 第2項
  * 第3項

上述條列, 星號前有3個空白

&gt; 引言則前面加上大於的符號
&gt; 其中也可以包含空白行
&gt;
&gt; 這是最後一行
</t>
<t tx="amd.20161004095719.1">&lt;section data-markdown&gt;
    &lt;script type="text/template"&gt;
@others
    &lt;/script&gt;
&lt;/section&gt;


						
</t>
<t tx="amd.20161004095719.2"># 2016Fall CPA 計算機程式課程

### THE HTML PRESENTATION FRAMEWORK

&lt;small&gt;
Created by [Hakim El Hattab](http://hakim.se)
[@hakimel](http://twitter.com/hakimel)
&lt;/small&gt;

[blog](blog/index.html)
</t>
<t tx="amd.20161004100003.1">&lt;section data-markdown&gt;
    &lt;script type="text/template"&gt;
&lt;!-- 請注意, @others 不可以內縮 --&gt;
@others
    &lt;/script&gt;
&lt;/section&gt;



						
</t>
<t tx="amd.20161004100003.2"># 影像檔案引用

and images can be specified like so:

![Image of Yaktocat](https://octodex.github.com/images/yaktocat.png)
</t>
<t tx="amd.20161004101327.1">&lt;section data-markdown&gt;
    &lt;script type="text/template"&gt;
@others
    &lt;/script&gt;
&lt;/section&gt;


						
</t>
<t tx="amd.20161004101327.2">## 使用 iframe 導入影片

### Markdown 沒有 iframe

&lt;iframe src="https://player.vimeo.com/video/183950627" width="640" height="492" frameborder="0" webkitallowfullscreen mozallowfullscreen allowfullscreen&gt;&lt;/iframe&gt;
</t>
<t tx="amd.20161004101902.1">&lt;section data-markdown&gt;
    &lt;script type="text/template"&gt;
@others
    &lt;/script&gt;
&lt;/section&gt;


						
</t>
<t tx="amd.20161004101902.2">## 使用 iframe 導入影片

### Markdown 沒有 iframe

&lt;iframe src="https://player.vimeo.com/video/183950627" width="640" height="492" frameborder="0" webkitallowfullscreen mozallowfullscreen allowfullscreen&gt;&lt;/iframe&gt;
</t>
<t tx="amd.20161004104641.1">&lt;section data-markdown&gt;
    &lt;script type="text/template"&gt;
@others
    &lt;/script&gt;
&lt;/section&gt;


						
</t>
<t tx="amd.20161004104641.2"># 機械設計主題教學

### 1. 強化創造能力 
(Creative Competencies, CC1-3)
### 2. 熟習六種表達 
(Six Presentation Methods, SP1-6)
### 3. 融入協同設計 
(Collaborative Designs, CD1-4)

</t>
<t tx="amd.20161004104820.1">&lt;section&gt;
@others
&lt;/section&gt;
</t>
<t tx="amd.20161004104904.1">&lt;section data-markdown&gt;
    &lt;script type="text/template"&gt;
@others
    &lt;/script&gt;
&lt;/section&gt;


						
</t>
<t tx="amd.20161004104904.2"># 強化創造能力

創造力至少包含三種元素:
### 1. 自學能力 (CC1, Self-learning)
### 2. 程式能力 (CC2, Programming)
### 3. 想像能力 (CC3, Imagination)

</t>
<t tx="amd.20161004105131.1">&lt;section data-markdown&gt;
    &lt;script type="text/template"&gt;
@others
    &lt;/script&gt;
&lt;/section&gt;


						
</t>
<t tx="amd.20161004105131.2"># 機械設計六種表達

### 1. 口語表達 (SP1, Oral Presentation)
### 2. 文字表達 (SP2, Text Presentation)
### 3. 2D 表達 (SP3, 2D Presentation)
### 4. 3D 表達 (SP4, 3D Presentation)
### 5. 理論表達 (SP5, Analytical Presentation)
### 6. 實體表達 (SP6, Physical Presentation)

</t>
<t tx="amd.20161004105716.1">&lt;section data-markdown&gt;
    &lt;script type="text/template"&gt;
@others
    &lt;/script&gt;
&lt;/section&gt;


						
</t>
<t tx="amd.20161004105716.2"># 融入協同設計

如何融入協同產品設計?

### 1. 了解電腦 (CD1, Computer)
### 2. 了解網路 (CD2, Network)
### 3. 了解協同設計適用之軟硬體工具 (CD3, Tools)
### 4. 執行協同專案 (CD4, Project)


</t>
<t tx="amd.20161004112026.1">&lt;section data-markdown&gt;
    &lt;script type="text/template"&gt;
@others
    &lt;/script&gt;
&lt;/section&gt;


						
</t>
<t tx="amd.20161004112026.2">## 計算機程式課程

計算機程式課程的教學主題:

  * CC1-自學能力 (Git, Github, Python)
  * CC2-程式能力 (Python 讀檔, 排序, 2D 繪圖, 2D 動畫)
  * SP1-口語表達 (自拍投影片 on Vimeo and Youtube)
  * P2-文字表達 (Wiki 與 Blog on Github Pages)
  * SP3-2D 表達 (2D 流程圖)
  * SP4-3D 表達 (自拍操作影片 on Vimeo and Youtube)
  * CD3-協同工具 (Git, Leo Editor 與 Github)
  * CD4-協同專案 (網際遊戲 on Github Pages)

</t>
<t tx="amd.20161004171423.1">&lt;section data-markdown&gt;
    &lt;script type="text/template"&gt;
&lt;!-- 請注意, @others 不可以內縮 --&gt;
@others
    &lt;/script&gt;
&lt;/section&gt;



						
</t>
<t tx="amd.20161004171423.2"># 數學符號與方程式

Inline math equations go in like so: $\omega = d\phi / dt$. Display
math should get its own line and be put in in double-dollarsigns:

$$I = \int \rho R^{2} dV$$
</t>
<t tx="leo.20151212173315.1"></t>
<t tx="leo.20151212173315.2">QTreeWidget {
    /* These apply to the selected item, but not to editing items.*/
    background-color: #ffffec; /* Leo's traditional tree color */
    selection-color: black; /* was white */
    selection-background-color: lightgrey;
    /* font-family: SansSerif; */
    /*font-family: DejaVu Sans Mono;*/
    font-family:YaHei Mono;
    /* 標題字型大小設定 */
    font-size: 20px;
    font-weight: normal; /* normal,bold,100,..,900 */
    font-style: normal; /* normal, italic,oblique */
 }

/* Headline edit widgets */
QTreeWidget QLineEdit {
    background-color: cornsilk;
    selection-color: white;
    selection-background-color: blue;
    /*font-family: DejaVu Sans Mono;*/    
    font-family:YaHei Mono;
    /* 沒有特別對應字型大小 */
    font-size: 20px;
    font-weight: normal; /* normal,bold,100,..,900 */
    font-style: normal; /* normal, italic,oblique */
}

/* The log panes */
QTextEdit {
    background-color: #f2fdff;
    selection-color: red;
    selection-background-color: blue;
    /* font-family: Courier New; */
    font-family:YaHei Mono;
    /* log font 大小 */
    font-size: 20px;
    font-weight: normal; /* normal,bold,100,..,900 */
    font-style: normal; /* normal, italic,oblique */
}

/* The body pane */
QTextEdit#richTextEdit {
    background-color: #fdf5f5; /* A kind of pink. */
    selection-color: white;
    selection-background-color: red;
    /*font-family: DejaVu Sans Mono;*/
    /* font-family: Courier New; */
    font-family:YaHei Mono;
    /* 內文字型大小 */
    font-size: 20px;
    font-weight: normal; /* normal,bold,100,..,900 */
    font-style: normal; /* normal,italic,oblique */
}

QLabel {
    font-family:YaHei Mono;'CherryPy', 'pytz', 'mako', 'beautifulsoup4', 'pymysql', 'peewee'
    /* 下方的 Minibuffer 標題字型大小 */
    font-size: 20px;
    font-weight: normal; /* normal,bold,100,..,900 */
    font-style: normal; /* normal,italic,oblique */
}

/* Editor labels */
QLineEdit#editorLabel {
    background-color: #ffffec;
    font-family:YaHei Mono;
    /* 沒有直接對應字型大小 */
    font-size: 20px;
    font-weight: normal; /* normal,bold,100,..,900 */
    font-style: normal; /* normal,italic,oblique */
    border: 2px;
    margin: 2px;
}</t>
<t tx="leo.20151212173315.3">horizontal: body pane to the left
vertical: body pane on the botton</t>
<t tx="leo.20151213085727.1">@language python
import os
#os.system("pelican content -o output -s local_publishconf.py -t theme/pelican-bootstrap3")
os.system("pelican content -o blog -s local_publishconf.py")
g.es("admin pelican 近端執行完畢")


</t>
<t tx="leo.20151213173830.1"></t>
<t tx="leo.20151213230723.1"></t>
<t tx="leo.20151213230729.1">利用

&lt;!-- PELICAN_END_SUMMARY --&gt;

來界定 Summary 摘要內容

前提, 必須設定 

PLUGIN_PATHS = ['plugin']

與

PLUGINS = ['liquid_tags.notebook', 'summary']

並且從 https://github.com/getpelican/pelican-plugins

取得 summary plugin</t>
<t tx="leo.20151213230957.1"># 設定網誌以 md 檔案建立的 file system date 為準, 無需自行設定

DEFAULT_DATE = 'fs'</t>
<t tx="leo.20170106140054.2"></t>
<t tx="leo.20170106140054.3">(uncached) amd.20161004083800.2
Diff...
  &lt;head&gt;
      &lt;meta charset="utf-8"&gt;
+     &lt;title&gt;&lt;&lt; 投影片標題 &gt;&gt;&lt;/title&gt;
-     &lt;title&gt;    2016 Fall 計算機程式課程
-     &lt;&lt; 投影片標題 &gt;&gt;
- &lt;/title&gt;
      &lt;meta name="description" content="A framework for easily creating beautiful presentations using HTML"&gt;
      &lt;meta name="author" content="Hakim El Hattab"&gt;
      
      &lt;meta name="apple-mobile-web-app-capable" content="yes"&gt;
      &lt;meta name="apple-mobile-web-app-status-bar-style" content="black-translucent"&gt;
      
      &lt;meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no"&gt;
      
      &lt;link rel="stylesheet" href="https://cad-lab.github.io/cadlab_data/reveal/css/reveal.css"&gt;
      &lt;link rel="stylesheet" href="https://cad-lab.github.io/cadlab_data/reveal/css/theme/black.css" id="theme"&gt;
      
      &lt;!-- Theme used for syntax highlighting of code --&gt;
      &lt;link rel="stylesheet" href="https://cad-lab.github.io/cadlab_data/reveal/lib/css/zenburn.css"&gt;
  
      &lt;!-- Printing and PDF exports --&gt;
      &lt;script&gt;
          var link = document.createElement( 'link' );
          link.rel = 'stylesheet';
          link.type = 'text/css';
          link.href = window.location.search.match( /print-pdf/gi ) ? 'https://cad-lab.github.io/cadlab_data/reveal/css/print/pdf.css' : 'https://cad-lab.github.io/cadlab_data/reveal/css/print/paper.css';
          document.getElementsByTagName( 'head' )[0].appendChild( link );
      &lt;/script&gt;
  
      &lt;!--[if lt IE 9]&gt;
      &lt;script src="https://cad-lab.github.io/cadlab_data/reveal/lib/js/html5shiv.js"&gt;&lt;/script&gt;
      &lt;![endif]--&gt;
  &lt;/head&gt;
  
</t>
<t tx="leo.20170106140054.4">&lt;head&gt;
    &lt;meta charset="utf-8"&gt;
    &lt;title&gt;&lt;&lt; 投影片標題 &gt;&gt;&lt;/title&gt;
    &lt;meta name="description" content="A framework for easily creating beautiful presentations using HTML"&gt;
    &lt;meta name="author" content="Hakim El Hattab"&gt;
    
    &lt;meta name="apple-mobile-web-app-capable" content="yes"&gt;
    &lt;meta name="apple-mobile-web-app-status-bar-style" content="black-translucent"&gt;
    
    &lt;meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no"&gt;
    
    &lt;link rel="stylesheet" href="https://cad-lab.github.io/cadlab_data/reveal/css/reveal.css"&gt;
    &lt;link rel="stylesheet" href="https://cad-lab.github.io/cadlab_data/reveal/css/theme/black.css" id="theme"&gt;
    
    &lt;!-- Theme used for syntax highlighting of code --&gt;
    &lt;link rel="stylesheet" href="https://cad-lab.github.io/cadlab_data/reveal/lib/css/zenburn.css"&gt;

    &lt;!-- Printing and PDF exports --&gt;
    &lt;script&gt;
        var link = document.createElement( 'link' );
        link.rel = 'stylesheet';
        link.type = 'text/css';
        link.href = window.location.search.match( /print-pdf/gi ) ? 'https://cad-lab.github.io/cadlab_data/reveal/css/print/pdf.css' : 'https://cad-lab.github.io/cadlab_data/reveal/css/print/paper.css';
        document.getElementsByTagName( 'head' )[0].appendChild( link );
    &lt;/script&gt;

    &lt;!--[if lt IE 9]&gt;
    &lt;script src="https://cad-lab.github.io/cadlab_data/reveal/lib/js/html5shiv.js"&gt;&lt;/script&gt;
    &lt;![endif]--&gt;
&lt;/head&gt;

</t>
<t tx="leo.20170106140054.5">&lt;head&gt;
    &lt;meta charset="utf-8"&gt;
    &lt;title&gt;    2016 Fall 計算機程式課程
    &lt;&lt; 投影片標題 &gt;&gt;
&lt;/title&gt;
    &lt;meta name="description" content="A framework for easily creating beautiful presentations using HTML"&gt;
    &lt;meta name="author" content="Hakim El Hattab"&gt;
    
    &lt;meta name="apple-mobile-web-app-capable" content="yes"&gt;
    &lt;meta name="apple-mobile-web-app-status-bar-style" content="black-translucent"&gt;
    
    &lt;meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no"&gt;
    
    &lt;link rel="stylesheet" href="https://cad-lab.github.io/cadlab_data/reveal/css/reveal.css"&gt;
    &lt;link rel="stylesheet" href="https://cad-lab.github.io/cadlab_data/reveal/css/theme/black.css" id="theme"&gt;
    
    &lt;!-- Theme used for syntax highlighting of code --&gt;
    &lt;link rel="stylesheet" href="https://cad-lab.github.io/cadlab_data/reveal/lib/css/zenburn.css"&gt;

    &lt;!-- Printing and PDF exports --&gt;
    &lt;script&gt;
        var link = document.createElement( 'link' );
        link.rel = 'stylesheet';
        link.type = 'text/css';
        link.href = window.location.search.match( /print-pdf/gi ) ? 'https://cad-lab.github.io/cadlab_data/reveal/css/print/pdf.css' : 'https://cad-lab.github.io/cadlab_data/reveal/css/print/paper.css';
        document.getElementsByTagName( 'head' )[0].appendChild( link );
    &lt;/script&gt;

    &lt;!--[if lt IE 9]&gt;
    &lt;script src="https://cad-lab.github.io/cadlab_data/reveal/lib/js/html5shiv.js"&gt;&lt;/script&gt;
    &lt;![endif]--&gt;
&lt;/head&gt;

</t>
<t tx="leo.20170106140054.6">(uncached) amd.20161004083800.3
Diff...
+ 2016 Fall 計算機程式課程
</t>
<t tx="leo.20170106140054.7">2016 Fall 計算機程式課程
</t>
<t tx="leo.20170106140054.8"></t>
<t tx="leo.20170106140152.1">@language md
Title:  W14 範例整理
Date: 2016-12-16 13:00
Category: Course
Tags: Brython
Author: 40523134

本週的學習重點在導入 Leo Editor &lt;a href="http://leoeditor.com/tutorial-programming.html"&gt;@clean&lt;/a&gt; 節點指令的用法, 利用子節點管理各章節的範例, 逐一將程式改寫為 Brython 格式後, 直接在瀏覽器中執行. 讓學員了解使用階層式架構管理資料的便利性.

&lt;!-- PELICAN_END_SUMMARY --&gt;

以下為 &lt;a href="http://mde.tw/2016fallcp/course/Python3Programs.txt"&gt;http://mde.tw/2016fallcp/course/Python3Programs.txt&lt;/a&gt; 中的 ch01 綜合範例, 其餘範例位於本 Leo Editor 專案檔中的 "Python3 程式範例" 節點, 請各組一一將範例程式碼與執行結果, 放入各學員的課程網誌中.

本課程 W15 - W18 週將利用 &lt;a href="./../course/introduction_to_prog_python3_2012.pdf"&gt;introduction_to_prog_python3_2012.pdf&lt;/a&gt; 與 &lt;a href="./../course/python_for_everybody_2015.pdf"&gt;python_for_everybody_2015.pdf&lt;/a&gt; 中有關物件導向的說明, 並且配合 &lt;a href="https://github.com/mdecourse/webgame"&gt;https://github.com/mdecourse/webgame&lt;/a&gt; 倉儲中的 Leo Editor 專案, 希望各組能夠了解利用 Python3 與 Brython 語法處理&lt;a href="http://mde.tw/webgame/bs.html"&gt;靜態圖檔&lt;/a&gt;、&lt;a href="http://mde.tw/webgame/bunny.html"&gt;動態圖檔&lt;/a&gt;與&lt;a href="http://mde.tw/webgame/spacewar.html"&gt;網際遊戲&lt;/a&gt;的運作原理, 順利完成各組的期末報告.

&lt;!-- 導入 FileSaver --&gt;
&lt;script type="text/javascript" src="./../FileSaver.min.js"&gt;&lt;/script&gt;

&lt;!-- 導入 Brython 標準程式庫 --&gt;

&lt;script type="text/javascript" 
    src="https://cdn.rawgit.com/brython-dev/brython/master/www/src/brython_dist.js"&gt;
&lt;/script&gt;

&lt;!-- 啟動 Brython --&gt;
&lt;script&gt;
window.onload=function(){
brython(1);
}
&lt;/script&gt;
@others
</t>
<t tx="leo.20170106140152.2">&lt;!-- ch01 基本的列印與輸入函式 --&gt;
&lt;script type="text/python3"&gt;
from browser import document
from browser import alert

'''
    # 利用 input() 取得使用者輸入, 然後進行資料處理或運算後, 列出結果
    #01-01.py
    print ("Hello World!")
    #01-02.py
    thetext = input("Enter some text ")
    print ("This is what you entered:")
    print (thetext)
    #01-03.py
    # Note that \n within quote marks forces a new line to be printed
    thetext = input("Enter some text\n")
    print ("This is what you entered:")
    print (thetext)
    #01-04.py
    prompt  = "Enter a some text "
    thetext = input(prompt)
    print ("This is what you entered:")
    print (thetext)
'''

def get_input(ev):
    the_input= input("上課不會滑手機")
    alert("上課不會滑手機:"+str(the_input))

document['ch01'].bind('click',get_input)
&lt;/script&gt;
&lt;button id="ch01"&gt;40523134&lt;/button&gt;

&lt;pre class="brush: python"&gt;
&lt;script type="text/python3"&gt;
from browser import document
from browser import alert

def get_input(ev):
    the_input= input("請輸入")
    alert("輸入為:"+str(the_input))

document['ch01'].bind('click',get_input)
&lt;/script&gt;
&lt;button id="ch01"&gt;取輸入後, 列印出來&lt;/button&gt;
&lt;/pre&gt;</t>
<t tx="leo.20170106140152.3">&lt;!-- 重複迴圈與 input() 練習 --&gt;

&lt;div id="container"&gt;&lt;/div&gt;
&lt;script type="text/python3"&gt;
from browser import document as doc
from browser import html
container = doc['container']

def numPrint(ev):
    mystring = ""
    num = input("請輸入重複執行次數:")
    #for i in range(1, 11):
    for i in range(1, int(num)+1):
        mystring += str(i) + ": hello mde" + html.BR()
    container &lt;= mystring

doc['w13'].bind('click',numPrint)
&lt;/script&gt;
&lt;button id="w13"&gt;取重複執行次數後, 列印出來&lt;/button&gt;

&lt;pre class="brush: python"&gt;
&lt;div id="container"&gt;&lt;/div&gt;
&lt;script type="text/python3"&gt;
from browser import document as doc
from browser import html
# 利用 document 根據 div 標註 id 設為 container 變數
container = doc['container']

# 因為此函式與滑鼠互動, 需要 event 當作輸入
def numPrint(ev):
    mystring = ""
    num = input("請輸入重複執行次數:")
    #for i in range(1, 11):
    for i in range(1, int(num)+1):
        mystring += str(i) + ": hello mde" + html.BR()
    container &lt;= mystring

# 與 id 為 'w13' 對應的 button 綁定, 且滑鼠 click 後, 呼叫 numPrint 函式執行
doc['w13'].bind('click',numPrint)
&lt;/script&gt;
&lt;button id="w13"&gt;取重複執行次數後, 列印出來&lt;/button&gt;
&lt;/pre&gt;

開始進行範例分類:

1. 接受使用者輸入, 然後利用 int() 或 str() 或 float() 函式轉為題目所需的資料型別
input() 取回的資料為字串, 經過 int() 可以轉為整數
若 num 變數內容為整數, 經過 str() 可以轉為字串, 然後再與其他字串進行結合後列印

2. 練習: 編寫一個可以將使用者輸入的攝氏溫度, 轉為華氏溫度.

&lt;div id="temperature"&gt;&lt;/div&gt;
&lt;script type="text/python3"&gt;
from browser import document as doc
from browser import html
# 利用 document 根據 div 標註 id 設為 container 變數
container = doc['temperature']

# 因為此函式與滑鼠互動, 需要 event 當作輸入
def convTemp(event):
    mystring = ""
    cdegree = input("請輸入攝氏溫度:")
    fdegree = float(cdegree)*9/5 + 32
    output_string = "攝氏 " + str(cdegree) + "度=華氏 " + str(fdegree) + "度" + html.BR()
    container &lt;= output_string

# 與 id 為 'w13-1' 對應的 button 綁定, 且滑鼠 click 後, 呼叫 convTemp 函式執行
doc['w13-1'].bind('click',convTemp)
&lt;/script&gt;
&lt;button id="w13-1"&gt;取攝氏溫度, 轉為華氏溫度&lt;/button&gt;

&lt;pre class="brush: python"&gt;
&lt;div id="temperature"&gt;&lt;/div&gt;
&lt;script type="text/python3"&gt;
from browser import document as doc
from browser import html
# 利用 document 根據 div 標註 id 設為 container 變數
container = doc['temperature']

# 因為此函式與滑鼠互動, 需要 event 當作輸入
def convTemp(event):
    mystring = ""
    cdegree = input("請輸入攝氏溫度:")
    fdegree = float(cdegree)*9/5 + 32
    output_string = "攝氏 " + str(cdegree) + "度=華氏 " + str(fdegree) + "度" + html.BR()
    container &lt;= output_string

# 與 id 為 'w13-1' 對應的 button 綁定, 且滑鼠 click 後, 呼叫 convTemp 函式執行
doc['w13-1'].bind('click',convTemp)
&lt;/script&gt;
&lt;button id="w13-1"&gt;取攝氏溫度, 轉為華氏溫度&lt;/button&gt;
&lt;/pre&gt;
</t>
<t tx="leo.20170106140152.4">&lt;script src="./../ace/ace.js" type="text/javascript" charset="utf-8"&gt;&lt;/script&gt;
&lt;script src="./../ace/ext-language_tools.js" type="text/javascript" charset="utf-8"&gt;&lt;/script&gt;
&lt;script src="./../ace/mode-python3.js" type="text/javascript" charset="utf-8"&gt;&lt;/script&gt;
&lt;script src="./../ace/snippets/python.js" type="text/javascript" charset="utf-8"&gt;&lt;/script&gt;

&lt;script type="text/python3" id="script1"&gt;
import sys
import time
import traceback
import javascript

from browser import document as doc, window, alert

has_ace = True
try:
    editor = window.ace.edit("editor")
    session = editor.getSession()
    session.setMode("ace/mode/python")

    editor.setOptions({
     'enableLiveAutocompletion': True,
     'enableSnippets': True,
     'highlightActiveLine': False,
     'highlightSelectedWord': True
    })
except:
    from browser import html
    editor = html.TEXTAREA(rows=20, cols=70)
    doc["editor"] &lt;= editor
    def get_value(): return editor.value
    def set_value(x):editor.value = x
    editor.getValue = get_value
    editor.setValue = set_value
    has_ace = False

if hasattr(window, 'localStorage'):
    from browser.local_storage import storage
else:
    storage = None

def reset_src():
    if storage is not None and "py_src" in storage:
        editor.setValue(storage["py_src"])
    else:
        editor.setValue('for i in range(10):\n\tprint(i)')
    editor.scrollToRow(0)
    editor.gotoLine(0)

def reset_src_area():
    if storage and "py_src" in storage:
        editor.value = storage["py_src"]
    else:
        editor.value = 'for i in range(10):\n\tprint(i)'

class cOutput:

    def __init__(self,target):
        self.target = doc[target]
    def write(self,data):
        self.target.value += str(data)
        

#if "console" in doc:
sys.stdout = cOutput("console")
sys.stderr = cOutput("console")

def to_str(xx):
    return str(xx)

info = sys.implementation.version
doc['version'].text = 'Brython %s.%s.%s' % (info.major, info.minor, info.micro)

output = ''

def show_console(ev):
    doc["console"].value = output
    doc["console"].cols = 60
    doc["console"].rows = 10

# load a Python script
def load_script(evt):
    _name = evt.target.value + '?foo=%s' % time.time()
    editor.setValue(open(_name).read())

# run a script, in global namespace if in_globals is True
def run(*args):
    global output
    doc["console"].value = ''
    src = editor.getValue()
    if storage is not None:
       storage["py_src"] = src

    t0 = time.perf_counter()
    try:
        #ns = {'__name__':'__main__'}
        ns = {'__name__':'editor'}
        exec(src, ns)
        state = 1
    except Exception as exc:
        traceback.print_exc(file=sys.stderr)
        state = 0
    output = doc["console"].value

    print('&lt;completed in %6.2f ms&gt;' % ((time.perf_counter() - t0) * 1000.0))
    return state

if has_ace:
    reset_src()
else:
    reset_src_area()
    
def clear_console(ev):
    doc["console"].value = ""

doc['run'].bind('click',run)
doc['show_console'].bind('click',show_console)
doc['clear_console'].bind('click',clear_console)
&lt;/script&gt;

&lt;div id="version"&gt;&lt;/div&gt;
&lt;br /&gt;
&lt;div id="editor" style="width:600px;height:300px;"&gt;&lt;/div&gt;
&lt;br /&gt;
&lt;form id="text-options"&gt;
    &lt;label&gt;Filename: &lt;input type="text" class="filename" id="text-filename" placeholder="a plain document"/&gt;.txt&lt;/label&gt;
    &lt;input type="submit" value="Save"/&gt;
&lt;/form&gt;
&lt;button id="run"&gt;Run&lt;/button&gt;
&lt;button id="show_console"&gt;Output&lt;/button&gt;
&lt;button id="clear_console"&gt;清除&lt;/button&gt;
&lt;div style="width:100%;height:100%;"&gt;
&lt;textarea id="console" autocomplete="off"&gt;&lt;/textarea&gt;
&lt;/div&gt;
&lt;div id="common"&gt;&lt;/div&gt;
</t>
<t tx="leo.20170106140152.5">
&lt;script type="text/python3"&gt;
from browser import document as doc
import script1

def ex1(ev):
    script1.editor.setValue('''for i in range(10):
    print(i)
    ''')
    script1.editor.scrollToRow(0)
    script1.editor.gotoLine(0)
doc['ex1'].bind('click',ex1)
&lt;/script&gt;&lt;a id="ex1"&gt;ex1&lt;/a&gt; - 簡單的 for 迴圈範例
</t>
<t tx="leo.20170106140152.6">
&lt;script type="text/python3"&gt;
from browser import document as doc
import script1

def ex2(ev):
    script1.editor.setValue('''#溫度轉換程式
from browser import document as doc

# 因為此函式與滑鼠互動, 需要 event 當作輸入
def convTemp():
    mystring = ""
    cdegree = input("請輸入攝氏溫度:")
    fdegree = float(cdegree)*9/5 + 32
    output_string = "攝氏 " + str(cdegree) + "度=華氏 " + str(fdegree) + "度" 
    # 利用 print() 將轉換結果送到 console 區
    print(output_string)

#直接呼叫 convTemp() 執行
convTemp()
    ''')
    script1.editor.scrollToRow(0)
    script1.editor.gotoLine(0)
doc['ex2'].bind('click',ex2)
&lt;/script&gt;&lt;a id="ex2"&gt;ex2&lt;/a&gt; - input() 與函式定義進行溫度轉換</t>
<t tx="leo.20170106140152.7">
&lt;!-- 請注意, 在 &lt;script&gt; 標註前一定要至少空一行 --&gt;
&lt;script type="text/python3"&gt;
from browser import document as doc
import script1

def ex3(ev):
    script1.editor.setValue('''# this is a comment
import math  # imports make code from other modules available

# code blocks are initiated by a trailing colon followed by indented lines
class Circle:                          # define a class
    def __init__(self, radius):   # constructor with parameter radius
        self.radius = radius      # store the parameter in a class variable

    def get_area(self):            # define a function that belongs to the class
        return math.pi*self.radius*self.radius

# code that is not in a class is executed immediately
for i in range(1, 10):
    # bitwise operation - https://wiki.python.org/moin/BitwiseOperators
    if (i &amp; 1) == 0:
        continue
    circle = Circle(i)              # create an instance
    print("A circle with radius {0} has area {1:0.2f}".format(
        i, circle.get_area()      # `print` writes output to the console
    ))
    ''')
    script1.editor.scrollToRow(0)
    script1.editor.gotoLine(0)
doc['ex3'].bind('click',ex3)
&lt;/script&gt;
&lt;a id="ex3"&gt;ex3&lt;/a&gt; - 基本的物件導向範例
</t>
<t tx="leo.20170106140152.8">
&lt;script type="text/python3"&gt;
from browser import document as doc
import script1

def ex4(ev):
    script1.editor.setValue('''#ex4
from browser.local_storage import storage
# 列出 py_src 對應的儲存內容
print(storage["py_src"])
# 接著將要使用 FileSaver.js 將內容存在 local 區
# https://github.com/eligrey/FileSaver.js/
# https://eligrey.com/demos/FileSaver.js/
    ''')
    script1.editor.scrollToRow(0)
    script1.editor.gotoLine(0)
doc['ex4'].bind('click',ex4)
&lt;/script&gt;&lt;a id="ex4"&gt;ex4&lt;/a&gt; - 將程式在近端存檔</t>
<t tx="leo.20170106140152.9">&lt;script type="text/python3"&gt;
from browser import document
from browser import alert
&lt;/script&gt;</t>
<t tx="leo.20170106140237.1">@language python
import os
import subprocess
import threading
import socket
import http.server, ssl

class HTTPServerV6(http.server.HTTPServer):
    address_family = socket.AF_INET6
  
def domake():
    # build directory
    os.chdir("./../")
    ipv6_address = '2001:288:6004:17:3004::808'
    server_address = (ipv6_address, 140.130.17.17)
    #httpd = http.server.HTTPServer(server_address, http.server.SimpleHTTPRequestHandler)
    httpd = HTTPServerV6(server_address, http.server.SimpleHTTPRequestHandler)
    httpd.socket = ssl.wrap_socket(httpd.socket,
                                   server_side=True,
                                   certfile='localhost.crt',
                                   keyfile='localhost.key',
                                   ssl_version=ssl.PROTOCOL_TLSv1)
    print("140.130.17.17 https server started")
    httpd.serve_forever()

# 利用執行緒執行 https 伺服器
make = threading.Thread(target=domake)
make.start()</t>
<t tx="leo.20170106140243.1">@language python
import os
import subprocess
import threading
import http.server, ssl

def domake():
    # build directory
    os.chdir("./../")
    server_address = ('localhost', 5443)
    httpd = http.server.HTTPServer(server_address, http.server.SimpleHTTPRequestHandler)
    httpd.socket = ssl.wrap_socket(httpd.socket,
                                   server_side=True,
                                   certfile='localhost.crt',
                                   keyfile='localhost.key',
                                   ssl_version=ssl.PROTOCOL_TLSv1)
    print("5443 https server started")
    httpd.serve_forever()

# 利用執行緒執行 https 伺服器
make = threading.Thread(target=domake)
make.start()</t>
<t tx="leo.20170106140251.1">sudo openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout localhost.key -out localhost.crt

</t>
</tnodes>
</leo_file>
